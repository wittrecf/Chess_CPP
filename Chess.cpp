// Chess
// Christof Wittreich
//
// OpenGL section influenced heavily by http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/

// Include standard headers
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Include GLEW
#include <GL/glew.h>

// Include GLFW
#include <GLFW/glfw3.h>
GLFWwindow* window;

// Include GLM
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
using namespace glm;

#include "shader.hpp"

#include "Board.h"

GLuint programID;
double clicked[] = { 4.0, 4.0 };
Board *board;
bool gameOver = false;

// Handles clicks onscreen
void onClick(GLFWwindow* window, int button, int action, int mods) {
	double x, y;
	glfwGetCursorPos(window, &x, &y);
	int state = glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT);
	if (state == GLFW_PRESS && !gameOver) {
		if (((7 - floor((x - 141) / 92) - 4 >= -4) && (7 - floor((x - 141) / 92) - 4 <= 3) && (floor((y - 13) / 92) - 4 >= -4) && (floor((y - 13) / 92) - 4 <= 3)) && (board->getTile(floor((y - 13) / 92), 7 - floor((x - 141) / 92)).getColor() == board->getTurnColor() || clicked[0] != 4 && clicked[1] != 4)) {
			if (!(clicked[1] + 4 == 8 && clicked[0] + 4 == 8) && board->move(clicked[0] + 4, clicked[1] + 4, 7 - floor((x - 141) / 92), floor((y - 13) / 92))) {
				clicked[0] = 4;
				clicked[1] = 4;
				board->clearPossible();
				if (!board->checkWin(abs(board->getTurnColor()))) {
					board->clearPossible();
				} else {
					if (board->checkCheck(board->getTurnColor() - 2, board->getTurnColor() - 2)) {
						printf("mate\n");
						board->setWin();
					} else {
						printf("draw\n");
						board->setDraw();
					}
					gameOver = true;
					return;
				}
			} else {
				if (((clicked[0] == 7 - floor((x - 141) / 92) - 4) && (clicked[1] == floor((y - 13) / 92) - 4)) || (board->getTile(floor((y - 13) / 92), 7 - floor((x - 141) / 92)).getPiece() == 0) || !(clicked[1] + 4 == 8 && clicked[0] + 4 == 8)) {
					clicked[0] = 4;
					clicked[1] = 4;
					board->clearPossible();
				} else {
					clicked[0] = 7 - floor((x - 141) / 92) - 4;
					clicked[1] = floor((y - 13) / 92) - 4;
					board->possibleMovement(clicked[0] + 4, clicked[1] + 4);
				}
			}
		}
	}
}

// Loads images
GLuint loadBMP_custom(const char * imagepath) {

	printf("Reading image %s\n", imagepath);

	// Data read from the header of the BMP file
	unsigned char header[54];
	unsigned int dataPos;
	unsigned int imageSize;
	unsigned int width, height;
	// Actual RGB data
	unsigned char * data;

	// Open the file
	FILE * file = fopen(imagepath, "rb");
	if (!file) {
		printf("%s could not be opened. Are you in the right directory ? Don't forget to read the FAQ !\n", imagepath);
		getchar();
		return 0;
	}

	// Read the header, i.e. the 54 first bytes

	// If less than 54 bytes are read, problem
	if (fread(header, 1, 54, file) != 54) {
		printf("Not a correct BMP file1\n");
		fclose(file);
		return 0;
	}
	// A BMP files always begins with "BM"
	if (header[0] != 'B' || header[1] != 'M') {
		printf("Not a correct BMP file2\n");
		fclose(file);
		return 0;
	}
	// Make sure this is a 24bpp file
	if (*(int*)&(header[0x1E]) != 0) { printf("Not a correct BMP file3\n");    fclose(file); return 0; }
	if (*(int*)&(header[0x1C]) != 24) { printf("Not a correct BMP file4\n");    fclose(file); return 0; }

	// Read the information about the image
	dataPos = *(int*)&(header[0x0A]);
	imageSize = *(int*)&(header[0x22]);
	width = *(int*)&(header[0x12]);
	height = *(int*)&(header[0x16]);

	// Some BMP files are misformatted, guess missing information
	if (imageSize == 0)    imageSize = width * height * 3; // 3 : one byte for each Red, Green and Blue component
	if (dataPos == 0)      dataPos = 54; // The BMP header is done that way

										 // Create a buffer
	data = new unsigned char[imageSize];

	// Read the actual data from the file into the buffer
	fread(data, 1, imageSize, file);

	// Everything is in memory now, the file can be closed.
	fclose(file);

	// Create one OpenGL texture
	GLuint textureID;
	glGenTextures(1, &textureID);

	// "Bind" the newly created texture : all future texture functions will modify this texture
	glBindTexture(GL_TEXTURE_2D, textureID);

	// Give the image to OpenGL
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_BGR, GL_UNSIGNED_BYTE, data);

	// OpenGL has now copied the data. Free our own version
	delete[] data;

	// Poor filtering, or ...
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); 

	// ... nice trilinear filtering ...
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	// ... which requires mipmaps. Generate them automatically.
	glGenerateMipmap(GL_TEXTURE_2D);

	// Return the ID of the texture we just created
	return textureID;
}

int main( void )
{
	board = new Board;
	// Initialise GLFW
	if( !glfwInit() )
	{
		fprintf( stderr, "Failed to initialize GLFW\n" );
		getchar();
		return -1;
	}

	glfwWindowHint(GLFW_SAMPLES, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// Open a window and create its OpenGL context
	window = glfwCreateWindow( 1024, 768, "Chess", NULL, NULL);
	if( window == NULL ){
		fprintf( stderr, "Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.\n" );
		getchar();
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	// Initialize GLEW
	glewExperimental = true;
	if (glewInit() != GLEW_OK) {
		fprintf(stderr, "Failed to initialize GLEW\n");
		getchar();
		glfwTerminate();
		return -1;
	}

	glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);

	// Dark gray background
	glClearColor(0.2f, 0.2f, 0.2f, 0.0f);

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS); 

	GLuint VertexArrayID;
	glGenVertexArrays(1, &VertexArrayID);
	glBindVertexArray(VertexArrayID);

	programID = LoadShaders( "TransformVertexShader.vertexshader", "ColorFragmentShader.fragmentshader" );

	GLuint MatrixID = glGetUniformLocation(programID, "MVP");

	glm::mat4 Projection = glm::perspective(glm::radians(45.0f), 4.0f / 3.0f, 0.1f, 100.0f);
	// Camera matrix
	glm::mat4 View       = glm::lookAt(
								glm::vec3(.1,10,0),
								glm::vec3(0,0,0),
								glm::vec3(0,1,0)
						   );
	// Model matrix
	glm::mat4 Model      = glm::mat4(1.0f);
	// Our ModelViewProjection
	glm::mat4 MVP        = Projection * View * Model;

	static const GLfloat g_vertex_buffer_data[] = {
		-4.0f, 0.0f, -3.0f,
		-4.0f, 0.0f, -4.0f,
		-3.0f, 0.0f, -4.0f,
		-4.0f, 0.0f, -3.0f,
		-3.0f, 0.0f, -3.0f,
		-3.0f, 0.0f, -4.0f,

		-4.0f, 0.0f, -2.0f,
		-4.0f, 0.0f, -3.0f,
		-3.0f, 0.0f, -3.0f,
		-4.0f, 0.0f, -2.0f,
		-3.0f, 0.0f, -2.0f,
		-3.0f, 0.0f, -3.0f,

		-4.0f, 0.0f, -1.0f,
		-4.0f, 0.0f, -2.0f,
		-3.0f, 0.0f, -2.0f,
		-4.0f, 0.0f, -1.0f,
		-3.0f, 0.0f, -1.0f,
		-3.0f, 0.0f, -2.0f,

		-4.0f, 0.0f,  0.0f,
		-4.0f, 0.0f, -1.0f,
		-3.0f, 0.0f, -1.0f,
		-4.0f, 0.0f,  0.0f,
		-3.0f, 0.0f,  0.0f,
		-3.0f, 0.0f, -1.0f,

		-4.0f, 0.0f,  1.0f,
		-4.0f, 0.0f,  0.0f,
		-3.0f, 0.0f,  0.0f,
		-4.0f, 0.0f,  1.0f,
		-3.0f, 0.0f,  1.0f,
		-3.0f, 0.0f,  0.0f,

		-4.0f, 0.0f,  2.0f,
		-4.0f, 0.0f,  1.0f,
		-3.0f, 0.0f,  1.0f,
		-4.0f, 0.0f,  2.0f,
		-3.0f, 0.0f,  2.0f,
		-3.0f, 0.0f,  1.0f,

		-4.0f, 0.0f,  3.0f,
		-4.0f, 0.0f,  2.0f,
		-3.0f, 0.0f,  2.0f,
		-4.0f, 0.0f,  3.0f,
		-3.0f, 0.0f,  3.0f,
		-3.0f, 0.0f,  2.0f,

		-4.0f, 0.0f,  4.0f,
		-4.0f, 0.0f,  3.0f,
		-3.0f, 0.0f,  3.0f,
		-4.0f, 0.0f,  4.0f,
		-3.0f, 0.0f,  4.0f,
		-3.0f, 0.0f,  3.0f,


		-3.0f, 0.0f, -3.0f,
		-3.0f, 0.0f, -4.0f,
		-2.0f, 0.0f, -4.0f,
		-3.0f, 0.0f, -3.0f,
		-2.0f, 0.0f, -3.0f,
		-2.0f, 0.0f, -4.0f,

		-3.0f, 0.0f, -2.0f,
		-3.0f, 0.0f, -3.0f,
		-2.0f, 0.0f, -3.0f,
		-3.0f, 0.0f, -2.0f,
		-2.0f, 0.0f, -2.0f,
		-2.0f, 0.0f, -3.0f,

		-3.0f, 0.0f, -1.0f,
		-3.0f, 0.0f, -2.0f,
		-2.0f, 0.0f, -2.0f,
		-3.0f, 0.0f, -1.0f,
		-2.0f, 0.0f, -1.0f,
		-2.0f, 0.0f, -2.0f,

		-3.0f, 0.0f,  0.0f,
		-3.0f, 0.0f, -1.0f,
		-2.0f, 0.0f, -1.0f,
		-3.0f, 0.0f,  0.0f,
		-2.0f, 0.0f,  0.0f,
		-2.0f, 0.0f, -1.0f,

		-3.0f, 0.0f,  1.0f,
		-3.0f, 0.0f,  0.0f,
		-2.0f, 0.0f,  0.0f,
		-3.0f, 0.0f,  1.0f,
		-2.0f, 0.0f,  1.0f,
		-2.0f, 0.0f,  0.0f,

		-3.0f, 0.0f,  2.0f,
		-3.0f, 0.0f,  1.0f,
		-2.0f, 0.0f,  1.0f,
		-3.0f, 0.0f,  2.0f,
		-2.0f, 0.0f,  2.0f,
		-2.0f, 0.0f,  1.0f,

		-3.0f, 0.0f,  3.0f,
		-3.0f, 0.0f,  2.0f,
		-2.0f, 0.0f,  2.0f,
		-3.0f, 0.0f,  3.0f,
		-2.0f, 0.0f,  3.0f,
		-2.0f, 0.0f,  2.0f,

		-3.0f, 0.0f,  4.0f,
		-3.0f, 0.0f,  3.0f,
		-2.0f, 0.0f,  3.0f,
		-3.0f, 0.0f,  4.0f,
		-2.0f, 0.0f,  4.0f,
		-2.0f, 0.0f,  3.0f,


		-2.0f, 0.0f, -3.0f,
		-2.0f, 0.0f, -4.0f,
		-1.0f, 0.0f, -4.0f,
		-2.0f, 0.0f, -3.0f,
		-1.0f, 0.0f, -3.0f,
		-1.0f, 0.0f, -4.0f,

		-2.0f, 0.0f, -2.0f,
		-2.0f, 0.0f, -3.0f,
		-1.0f, 0.0f, -3.0f,
		-2.0f, 0.0f, -2.0f,
		-1.0f, 0.0f, -2.0f,
		-1.0f, 0.0f, -3.0f,

		-2.0f, 0.0f, -1.0f,
		-2.0f, 0.0f, -2.0f,
		-1.0f, 0.0f, -2.0f,
		-2.0f, 0.0f, -1.0f,
		-1.0f, 0.0f, -1.0f,
		-1.0f, 0.0f, -2.0f,

		-2.0f, 0.0f,  0.0f,
		-2.0f, 0.0f, -1.0f,
		-1.0f, 0.0f, -1.0f,
		-2.0f, 0.0f,  0.0f,
		-1.0f, 0.0f,  0.0f,
		-1.0f, 0.0f, -1.0f,

		-2.0f, 0.0f,  1.0f,
		-2.0f, 0.0f,  0.0f,
		-1.0f, 0.0f,  0.0f,
		-2.0f, 0.0f,  1.0f,
		-1.0f, 0.0f,  1.0f,
		-1.0f, 0.0f,  0.0f,

		-2.0f, 0.0f,  2.0f,
		-2.0f, 0.0f,  1.0f,
		-1.0f, 0.0f,  1.0f,
		-2.0f, 0.0f,  2.0f,
		-1.0f, 0.0f,  2.0f,
		-1.0f, 0.0f,  1.0f,

		-2.0f, 0.0f,  3.0f,
		-2.0f, 0.0f,  2.0f,
		-1.0f, 0.0f,  2.0f,
		-2.0f, 0.0f,  3.0f,
		-1.0f, 0.0f,  3.0f,
		-1.0f, 0.0f,  2.0f,

		-2.0f, 0.0f,  4.0f,
		-2.0f, 0.0f,  3.0f,
		-1.0f, 0.0f,  3.0f,
		-2.0f, 0.0f,  4.0f,
		-1.0f, 0.0f,  4.0f,
		-1.0f, 0.0f,  3.0f,


		-1.0f, 0.0f, -3.0f,
		-1.0f, 0.0f, -4.0f,
		 0.0f, 0.0f, -4.0f,
		-1.0f, 0.0f, -3.0f,
		 0.0f, 0.0f, -3.0f,
		 0.0f, 0.0f, -4.0f,

		-1.0f, 0.0f, -2.0f,
		-1.0f, 0.0f, -3.0f,
		 0.0f, 0.0f, -3.0f,
		-1.0f, 0.0f, -2.0f,
		 0.0f, 0.0f, -2.0f,
		 0.0f, 0.0f, -3.0f,

		-1.0f, 0.0f, -1.0f,
		-1.0f, 0.0f, -2.0f,
		 0.0f, 0.0f, -2.0f,
		-1.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -2.0f,

		-1.0f, 0.0f,  0.0f,
		-1.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -1.0f,
		-1.0f, 0.0f,  0.0f,
		 0.0f, 0.0f,  0.0f,
		 0.0f, 0.0f, -1.0f,

		-1.0f, 0.0f,  1.0f,
		-1.0f, 0.0f,  0.0f,
		 0.0f, 0.0f,  0.0f,
		-1.0f, 0.0f,  1.0f,
		 0.0f, 0.0f,  1.0f,
		 0.0f, 0.0f,  0.0f,

		-1.0f, 0.0f,  2.0f,
		-1.0f, 0.0f,  1.0f,
		 0.0f, 0.0f,  1.0f,
		-1.0f, 0.0f,  2.0f,
		 0.0f, 0.0f,  2.0f,
		 0.0f, 0.0f,  1.0f,

		-1.0f, 0.0f,  3.0f,
		-1.0f, 0.0f,  2.0f,
		 0.0f, 0.0f,  2.0f,
		-1.0f, 0.0f,  3.0f,
		 0.0f, 0.0f,  3.0f,
		 0.0f, 0.0f,  2.0f,

		-1.0f, 0.0f,  4.0f,
		-1.0f, 0.0f,  3.0f,
		 0.0f, 0.0f,  3.0f,
		-1.0f, 0.0f,  4.0f,
		 0.0f, 0.0f,  4.0f,
		 0.0f, 0.0f,  3.0f,


		 0.0f, 0.0f, -3.0f,
		 0.0f, 0.0f, -4.0f,
		 1.0f, 0.0f, -4.0f,
		 0.0f, 0.0f, -3.0f,
		 1.0f, 0.0f, -3.0f,
		 1.0f, 0.0f, -4.0f,

		 0.0f, 0.0f, -2.0f,
		 0.0f, 0.0f, -3.0f,
		 1.0f, 0.0f, -3.0f,
		 0.0f, 0.0f, -2.0f,
		 1.0f, 0.0f, -2.0f,
		 1.0f, 0.0f, -3.0f,

		 0.0f, 0.0f, -1.0f,
		 0.0f, 0.0f, -2.0f,
		 1.0f, 0.0f, -2.0f,
		 0.0f, 0.0f, -1.0f,
		 1.0f, 0.0f, -1.0f,
		 1.0f, 0.0f, -2.0f,

		 0.0f, 0.0f,  0.0f,
		 0.0f, 0.0f, -1.0f,
		 1.0f, 0.0f, -1.0f,
		 0.0f, 0.0f,  0.0f,
		 1.0f, 0.0f,  0.0f,
		 1.0f, 0.0f, -1.0f,

		 0.0f, 0.0f,  1.0f,
		 0.0f, 0.0f,  0.0f,
		 1.0f, 0.0f,  0.0f,
		 0.0f, 0.0f,  1.0f,
		 1.0f, 0.0f,  1.0f,
		 1.0f, 0.0f,  0.0f,

		 0.0f, 0.0f,  2.0f,
		 0.0f, 0.0f,  1.0f,
		 1.0f, 0.0f,  1.0f,
		 0.0f, 0.0f,  2.0f,
		 1.0f, 0.0f,  2.0f,
		 1.0f, 0.0f,  1.0f,

		 0.0f, 0.0f,  3.0f,
		 0.0f, 0.0f,  2.0f,
		 1.0f, 0.0f,  2.0f,
		 0.0f, 0.0f,  3.0f,
		 1.0f, 0.0f,  3.0f,
		 1.0f, 0.0f,  2.0f,

		 0.0f, 0.0f,  4.0f,
		 0.0f, 0.0f,  3.0f,
		 1.0f, 0.0f,  3.0f,
		 0.0f, 0.0f,  4.0f,
		 1.0f, 0.0f,  4.0f,
		 1.0f, 0.0f,  3.0f,


		 1.0f, 0.0f, -3.0f,
		 1.0f, 0.0f, -4.0f,
		 2.0f, 0.0f, -4.0f,
		 1.0f, 0.0f, -3.0f,
		 2.0f, 0.0f, -3.0f,
		 2.0f, 0.0f, -4.0f,

		 1.0f, 0.0f, -2.0f,
		 1.0f, 0.0f, -3.0f,
		 2.0f, 0.0f, -3.0f,
		 1.0f, 0.0f, -2.0f,
		 2.0f, 0.0f, -2.0f,
		 2.0f, 0.0f, -3.0f,

		 1.0f, 0.0f, -1.0f,
		 1.0f, 0.0f, -2.0f,
		 2.0f, 0.0f, -2.0f,
		 1.0f, 0.0f, -1.0f,
		 2.0f, 0.0f, -1.0f,
		 2.0f, 0.0f, -2.0f,

		 1.0f, 0.0f,  0.0f,
		 1.0f, 0.0f, -1.0f,
		 2.0f, 0.0f, -1.0f,
		 1.0f, 0.0f,  0.0f,
		 2.0f, 0.0f,  0.0f,
		 2.0f, 0.0f, -1.0f,

		 1.0f, 0.0f,  1.0f,
		 1.0f, 0.0f,  0.0f,
		 2.0f, 0.0f,  0.0f,
		 1.0f, 0.0f,  1.0f,
		 2.0f, 0.0f,  1.0f,
		 2.0f, 0.0f,  0.0f,

		 1.0f, 0.0f,  2.0f,
		 1.0f, 0.0f,  1.0f,
		 2.0f, 0.0f,  1.0f,
		 1.0f, 0.0f,  2.0f,
		 2.0f, 0.0f,  2.0f,
		 2.0f, 0.0f,  1.0f,

		 1.0f, 0.0f,  3.0f,
		 1.0f, 0.0f,  2.0f,
		 2.0f, 0.0f,  2.0f,
		 1.0f, 0.0f,  3.0f,
		 2.0f, 0.0f,  3.0f,
		 2.0f, 0.0f,  2.0f,

		 1.0f, 0.0f,  4.0f,
		 1.0f, 0.0f,  3.0f,
		 2.0f, 0.0f,  3.0f,
		 1.0f, 0.0f,  4.0f,
		 2.0f, 0.0f,  4.0f,
		 2.0f, 0.0f,  3.0f,


		 2.0f, 0.0f, -3.0f,
		 2.0f, 0.0f, -4.0f,
		 3.0f, 0.0f, -4.0f,
		 2.0f, 0.0f, -3.0f,
		 3.0f, 0.0f, -3.0f,
		 3.0f, 0.0f, -4.0f,

		 2.0f, 0.0f, -2.0f,
		 2.0f, 0.0f, -3.0f,
		 3.0f, 0.0f, -3.0f,
		 2.0f, 0.0f, -2.0f,
		 3.0f, 0.0f, -2.0f,
		 3.0f, 0.0f, -3.0f,

		 2.0f, 0.0f, -1.0f,
		 2.0f, 0.0f, -2.0f,
		 3.0f, 0.0f, -2.0f,
		 2.0f, 0.0f, -1.0f,
		 3.0f, 0.0f, -1.0f,
		 3.0f, 0.0f, -2.0f,

		 2.0f, 0.0f,  0.0f,
		 2.0f, 0.0f, -1.0f,
		 3.0f, 0.0f, -1.0f,
		 2.0f, 0.0f,  0.0f,
		 3.0f, 0.0f,  0.0f,
		 3.0f, 0.0f, -1.0f,

		 2.0f, 0.0f,  1.0f,
		 2.0f, 0.0f,  0.0f,
		 3.0f, 0.0f,  0.0f,
		 2.0f, 0.0f,  1.0f,
		 3.0f, 0.0f,  1.0f,
		 3.0f, 0.0f,  0.0f,

		 2.0f, 0.0f,  2.0f,
		 2.0f, 0.0f,  1.0f,
		 3.0f, 0.0f,  1.0f,
		 2.0f, 0.0f,  2.0f,
		 3.0f, 0.0f,  2.0f,
		 3.0f, 0.0f,  1.0f,

		 2.0f, 0.0f,  3.0f,
		 2.0f, 0.0f,  2.0f,
		 3.0f, 0.0f,  2.0f,
		 2.0f, 0.0f,  3.0f,
		 3.0f, 0.0f,  3.0f,
		 3.0f, 0.0f,  2.0f,

		 2.0f, 0.0f,  4.0f,
		 2.0f, 0.0f,  3.0f,
		 3.0f, 0.0f,  3.0f,
		 2.0f, 0.0f,  4.0f,
		 3.0f, 0.0f,  4.0f,
		 3.0f, 0.0f,  3.0f,


		 3.0f, 0.0f, -3.0f,
		 3.0f, 0.0f, -4.0f,
		 4.0f, 0.0f, -4.0f,
		 3.0f, 0.0f, -3.0f,
		 4.0f, 0.0f, -3.0f,
		 4.0f, 0.0f, -4.0f,

		 3.0f, 0.0f, -2.0f,
		 3.0f, 0.0f, -3.0f,
		 4.0f, 0.0f, -3.0f,
		 3.0f, 0.0f, -2.0f,
		 4.0f, 0.0f, -2.0f,
		 4.0f, 0.0f, -3.0f,

		 3.0f, 0.0f, -1.0f,
		 3.0f, 0.0f, -2.0f,
		 4.0f, 0.0f, -2.0f,
		 3.0f, 0.0f, -1.0f,
		 4.0f, 0.0f, -1.0f,
		 4.0f, 0.0f, -2.0f,

		 3.0f, 0.0f,  0.0f,
		 3.0f, 0.0f, -1.0f,
		 4.0f, 0.0f, -1.0f,
		 3.0f, 0.0f,  0.0f,
		 4.0f, 0.0f,  0.0f,
		 4.0f, 0.0f, -1.0f,

		 3.0f, 0.0f,  1.0f,
		 3.0f, 0.0f,  0.0f,
		 4.0f, 0.0f,  0.0f,
		 3.0f, 0.0f,  1.0f,
		 4.0f, 0.0f,  1.0f,
		 4.0f, 0.0f,  0.0f,

		 3.0f, 0.0f,  2.0f,
		 3.0f, 0.0f,  1.0f,
		 4.0f, 0.0f,  1.0f,
		 3.0f, 0.0f,  2.0f,
		 4.0f, 0.0f,  2.0f,
		 4.0f, 0.0f,  1.0f,

		 3.0f, 0.0f,  3.0f,
		 3.0f, 0.0f,  2.0f,
		 4.0f, 0.0f,  2.0f,
		 3.0f, 0.0f,  3.0f,
		 4.0f, 0.0f,  3.0f,
		 4.0f, 0.0f,  2.0f,

		 3.0f, 0.0f,  4.0f,
		 3.0f, 0.0f,  3.0f,
		 4.0f, 0.0f,  3.0f,
		 3.0f, 0.0f,  4.0f,
		 4.0f, 0.0f,  4.0f,
		 4.0f, 0.0f,  3.0f,
	};

	static const GLfloat g_color_buffer_data[] = { 
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,


		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,


		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,


		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,


		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,
		1.000f,  1.000f,  1.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
	};

	static GLfloat data[] = {
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,


		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,

		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
		0.000f,  0.000f,  0.000f,
	};

	GLuint vertexbuffer;
	glGenBuffers(1, &vertexbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);

	GLuint colorbuffer;
	glGenBuffers(1, &colorbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_color_buffer_data), g_color_buffer_data, GL_STATIC_DRAW);

	GLuint databuffer;
	glGenBuffers(1, &databuffer);
	glBindBuffer(GL_ARRAY_BUFFER, databuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);

	glfwSetMouseButtonCallback(window, onClick);

	GLuint blackPawn_white = loadBMP_custom("resources/blackPawn(white).bmp");
	GLuint blackPawn_whiteID = glGetUniformLocation(programID, "blackPawn_white");

	GLuint blackPawn_black = loadBMP_custom("resources/blackPawn(black).bmp");
	GLuint blackPawn_blackID = glGetUniformLocation(programID, "blackPawn_black");

	GLuint whitePawn_white = loadBMP_custom("resources/whitePawn(white).bmp");
	GLuint whitePawn_whiteID = glGetUniformLocation(programID, "whitePawn_white");

	GLuint whitePawn_black = loadBMP_custom("resources/whitePawn(black).bmp");
	GLuint whitePawn_blackID = glGetUniformLocation(programID, "whitePawn_black");

	GLuint blackRook_white = loadBMP_custom("resources/blackRook(white).bmp");
	GLuint blackRook_whiteID = glGetUniformLocation(programID, "blackRook_white");

	GLuint blackRook_black = loadBMP_custom("resources/blackRook(black).bmp");
	GLuint blackRook_blackID = glGetUniformLocation(programID, "blackRook_black");

	GLuint whiteRook_white = loadBMP_custom("resources/whiteRook(white).bmp");
	GLuint whiteRook_whiteID = glGetUniformLocation(programID, "whiteRook_white");

	GLuint whiteRook_black = loadBMP_custom("resources/whiteRook(black).bmp");
	GLuint whiteRook_blackID = glGetUniformLocation(programID, "whiteRook_black");

	GLuint blackKnight_white = loadBMP_custom("resources/blackKnight(white).bmp");
	GLuint blackKnight_whiteID = glGetUniformLocation(programID, "blackKnight_white");

	GLuint blackKnight_black = loadBMP_custom("resources/blackKnight(black).bmp");
	GLuint blackKnight_blackID = glGetUniformLocation(programID, "blackKnight_black");

	GLuint whiteKnight_white = loadBMP_custom("resources/whiteKnight(white).bmp");
	GLuint whiteKnight_whiteID = glGetUniformLocation(programID, "whiteKnight_white");

	GLuint whiteKnight_black = loadBMP_custom("resources/whiteKnight(black).bmp");
	GLuint whiteKnight_blackID = glGetUniformLocation(programID, "whiteKnight_black");

	GLuint blackBishop_white = loadBMP_custom("resources/blackBishop(white).bmp");
	GLuint blackBishop_whiteID = glGetUniformLocation(programID, "blackBishop_white");

	GLuint blackBishop_black = loadBMP_custom("resources/blackBishop(black).bmp");
	GLuint blackBishop_blackID = glGetUniformLocation(programID, "blackBishop_black");

	GLuint whiteBishop_white = loadBMP_custom("resources/whiteBishop(white).bmp");
	GLuint whiteBishop_whiteID = glGetUniformLocation(programID, "whiteBishop_white");

	GLuint whiteBishop_black = loadBMP_custom("resources/whiteBishop(black).bmp");
	GLuint whiteBishop_blackID = glGetUniformLocation(programID, "whiteBishop_black");

	GLuint blackQueen_white = loadBMP_custom("resources/blackQueen(white).bmp");
	GLuint blackQueen_whiteID = glGetUniformLocation(programID, "blackQueen_white");

	GLuint blackQueen_black = loadBMP_custom("resources/blackQueen(black).bmp");
	GLuint blackQueen_blackID = glGetUniformLocation(programID, "blackQueen_black");

	GLuint whiteQueen_white = loadBMP_custom("resources/whiteQueen(white).bmp");
	GLuint whiteQueen_whiteID = glGetUniformLocation(programID, "whiteQueen_white");

	GLuint whiteQueen_black = loadBMP_custom("resources/whiteQueen(black).bmp");
	GLuint whiteQueen_blackID = glGetUniformLocation(programID, "whiteQueen_black");

	GLuint blackKing_white = loadBMP_custom("resources/blackKing(white).bmp");
	GLuint blackKing_whiteID = glGetUniformLocation(programID, "blackKing_white");

	GLuint blackKing_black = loadBMP_custom("resources/blackKing(black).bmp");
	GLuint blackKing_blackID = glGetUniformLocation(programID, "blackKing_black");

	GLuint whiteKing_white = loadBMP_custom("resources/whiteKing(white).bmp");
	GLuint whiteKing_whiteID = glGetUniformLocation(programID, "whiteKing_white");

	GLuint whiteKing_black = loadBMP_custom("resources/whiteKing(black).bmp");
	GLuint whiteKing_blackID = glGetUniformLocation(programID, "whiteKing_black");

	GLuint blackPawn_selected = loadBMP_custom("resources/blackPawn(selected).bmp");
	GLuint blackPawn_selectedID = glGetUniformLocation(programID, "blackPawn_selected");

	GLuint whitePawn_selected = loadBMP_custom("resources/whitePawn(selected).bmp");
	GLuint whitePawn_selectedID = glGetUniformLocation(programID, "whitePawn_selected");

	GLuint blackRook_selected = loadBMP_custom("resources/blackRook(selected).bmp");
	GLuint blackRook_selectedID = glGetUniformLocation(programID, "blackRook_selected");

	GLuint whiteRook_selected = loadBMP_custom("resources/whiteRook(selected).bmp");
	GLuint whiteRook_selectedID = glGetUniformLocation(programID, "whiteRook_selected");

	GLuint blackKnight_selected = loadBMP_custom("resources/blackKnight(selected).bmp");
	GLuint blackKnight_selectedID = glGetUniformLocation(programID, "blackKnight_selected");

	GLuint whiteKnight_selected = loadBMP_custom("resources/whiteKnight(selected).bmp");
	GLuint whiteKnight_selectedID = glGetUniformLocation(programID, "whiteKnight_selected");

	GLuint blackBishop_selected = loadBMP_custom("resources/blackBishop(selected).bmp");
	GLuint blackBishop_selectedID = glGetUniformLocation(programID, "blackBishop_selected");

	GLuint whiteBishop_selected = loadBMP_custom("resources/whiteBishop(selected).bmp");
	GLuint whiteBishop_selectedID = glGetUniformLocation(programID, "whiteBishop_selected");

	GLuint blackQueen_selected = loadBMP_custom("resources/blackQueen(selected).bmp");
	GLuint blackQueen_selectedID = glGetUniformLocation(programID, "blackQueen_selected");

	GLuint whiteQueen_selected = loadBMP_custom("resources/whiteQueen(selected).bmp");
	GLuint whiteQueen_selectedID = glGetUniformLocation(programID, "whiteQueen_selected");

	GLuint blackKing_selected = loadBMP_custom("resources/blackKing(selected).bmp");
	GLuint blackKing_selectedID = glGetUniformLocation(programID, "blackKing_selected");

	GLuint whiteKing_selected = loadBMP_custom("resources/whiteKing(selected).bmp");
	GLuint whiteKing_selectedID = glGetUniformLocation(programID, "whiteKing_selected");

	GLuint blackPawn_potential = loadBMP_custom("resources/blackPawn(potential).bmp");
	GLuint blackPawn_potentialID = glGetUniformLocation(programID, "blackPawn_potential");

	GLuint whitePawn_potential = loadBMP_custom("resources/whitePawn(potential).bmp");
	GLuint whitePawn_potentialID = glGetUniformLocation(programID, "whitePawn_potential");

	GLuint blackRook_potential = loadBMP_custom("resources/blackRook(potential).bmp");
	GLuint blackRook_potentialID = glGetUniformLocation(programID, "blackRook_potential");

	GLuint whiteRook_potential = loadBMP_custom("resources/whiteRook(potential).bmp");
	GLuint whiteRook_potentialID = glGetUniformLocation(programID, "whiteRook_potential");

	GLuint blackKnight_potential = loadBMP_custom("resources/blackKnight(potential).bmp");
	GLuint blackKnight_potentialID = glGetUniformLocation(programID, "blackKnight_potential");

	GLuint whiteKnight_potential = loadBMP_custom("resources/whiteKnight(potential).bmp");
	GLuint whiteKnight_potentialID = glGetUniformLocation(programID, "whiteKnight_potential");

	GLuint blackBishop_potential = loadBMP_custom("resources/blackBishop(potential).bmp");
	GLuint blackBishop_potentialID = glGetUniformLocation(programID, "blackBishop_potential");

	GLuint whiteBishop_potential = loadBMP_custom("resources/whiteBishop(potential).bmp");
	GLuint whiteBishop_potentialID = glGetUniformLocation(programID, "whiteBishop_potential");

	GLuint blackQueen_potential = loadBMP_custom("resources/blackQueen(potential).bmp");
	GLuint blackQueen_potentialID = glGetUniformLocation(programID, "blackQueen_potential");

	GLuint whiteQueen_potential = loadBMP_custom("resources/whiteQueen(potential).bmp");
	GLuint whiteQueen_potentialID = glGetUniformLocation(programID, "whiteQueen_potential");

	GLuint blackKing_potential = loadBMP_custom("resources/blackKing(potential).bmp");
	GLuint blackKing_potentialID = glGetUniformLocation(programID, "blackKing_potential");

	GLuint whiteKing_potential = loadBMP_custom("resources/whiteKing(potential).bmp");
	GLuint whiteKing_potentialID = glGetUniformLocation(programID, "whiteKing_potential");

	GLuint blackSquare_potential = loadBMP_custom("resources/blackSquare(potential).bmp");
	GLuint blackSquare_potentialID = glGetUniformLocation(programID, "blackSquare_potential");

	GLuint whiteSquare_potential = loadBMP_custom("resources/whiteSquare(potential).bmp");
	GLuint whiteSquare_potentialID = glGetUniformLocation(programID, "whiteSquare_potential");

	GLuint blackKing_win = loadBMP_custom("resources/blackKing(win).bmp");
	GLuint blackKing_winID = glGetUniformLocation(programID, "blackKing_win");

	GLuint whiteKing_win = loadBMP_custom("resources/whiteKing(win).bmp");
	GLuint whiteKing_winID = glGetUniformLocation(programID, "whiteKing_win");

	GLuint blackKing_lose = loadBMP_custom("resources/blackKing(lose).bmp");
	GLuint blackKing_loseID = glGetUniformLocation(programID, "blackKing_lose");

	GLuint whiteKing_lose = loadBMP_custom("resources/whiteKing(lose).bmp");
	GLuint whiteKing_loseID = glGetUniformLocation(programID, "whiteKing_lose");
	int t = 0;

	do {
		t++;
		int temp;
		for (int i = 0; i < 1152; i += 3) {
			temp = floor(i / 18);
			data[i] = board->getTile(floor(temp / 8), temp % 8).getPiece();
			data[i + 1] = board->getTile(floor(temp / 8), temp % 8).getColor();
			data[i + 2] = board->getTile(floor(temp / 8), temp % 8).getSelected();
			if (data[i] == 7 && t % 100 == 0) {
				//printf("%f is at %d, %d with %f\n", data[i], temp % 8, floor(temp / 8), board->getTile(floor(temp / 8), temp % 8).getSelected());
			} else {
				//printf("normal\n");
			}
		}
		glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);

		// Clear the screen
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// Use our shader
		glUseProgram(programID);

		glUniform1i(blackPawn_whiteID, 0);
		glUniform1i(blackPawn_blackID, 1);
		glUniform1i(whitePawn_whiteID, 2);
		glUniform1i(whitePawn_blackID, 3);

		glUniform1i(blackRook_whiteID, 4);
		glUniform1i(blackRook_blackID, 5);
		glUniform1i(whiteRook_whiteID, 6);
		glUniform1i(whiteRook_blackID, 7);

		glUniform1i(blackKnight_whiteID, 8);
		glUniform1i(blackKnight_blackID, 9);
		glUniform1i(whiteKnight_whiteID, 10);
		glUniform1i(whiteKnight_blackID, 11);

		glUniform1i(blackBishop_whiteID, 12);
		glUniform1i(blackBishop_blackID, 13);
		glUniform1i(whiteBishop_whiteID, 14);
		glUniform1i(whiteBishop_blackID, 15);

		glUniform1i(blackQueen_whiteID, 16);
		glUniform1i(blackQueen_blackID, 17);
		glUniform1i(whiteQueen_whiteID, 18);
		glUniform1i(whiteQueen_blackID, 19);

		glUniform1i(blackKing_whiteID, 20);
		glUniform1i(blackKing_blackID, 21);
		glUniform1i(whiteKing_whiteID, 22);
		glUniform1i(whiteKing_blackID, 23);

		glUniform1i(blackPawn_selectedID, 24);
		glUniform1i(whitePawn_selectedID, 25);
		glUniform1i(blackRook_selectedID, 26);
		glUniform1i(whiteRook_selectedID, 27);
		glUniform1i(blackKnight_selectedID, 28);
		glUniform1i(whiteKnight_selectedID, 29);
		glUniform1i(blackBishop_selectedID, 30);
		glUniform1i(whiteBishop_selectedID, 31);
		glUniform1i(blackQueen_selectedID, 32);
		glUniform1i(whiteQueen_selectedID, 33);
		glUniform1i(blackKing_selectedID, 34);
		glUniform1i(whiteKing_selectedID, 35);

		glUniform1i(blackPawn_potentialID, 36);
		glUniform1i(whitePawn_potentialID, 37);
		glUniform1i(blackRook_potentialID, 38);
		glUniform1i(whiteRook_potentialID, 39);
		glUniform1i(blackKnight_potentialID, 40);
		glUniform1i(whiteKnight_potentialID, 41);
		glUniform1i(blackBishop_potentialID, 42);
		glUniform1i(whiteBishop_potentialID, 43);
		glUniform1i(blackQueen_potentialID, 44);
		glUniform1i(whiteQueen_potentialID, 45);
		glUniform1i(blackKing_potentialID, 46);
		glUniform1i(whiteKing_potentialID, 47);

		glUniform1i(blackSquare_potentialID, 48);
		glUniform1i(whiteSquare_potentialID, 49);

		glUniform1i(blackKing_winID, 50);
		glUniform1i(whiteKing_winID, 51);
		glUniform1i(blackKing_loseID, 52);
		glUniform1i(whiteKing_loseID, 53);

		glActiveTexture(GL_TEXTURE0 + 0);
		glBindTexture(GL_TEXTURE_2D, blackPawn_white);
		glActiveTexture(GL_TEXTURE0 + 1);
		glBindTexture(GL_TEXTURE_2D, blackPawn_black);
		glActiveTexture(GL_TEXTURE0 + 2);
		glBindTexture(GL_TEXTURE_2D, whitePawn_white);
		glActiveTexture(GL_TEXTURE0 + 3);
		glBindTexture(GL_TEXTURE_2D, whitePawn_black);

		glActiveTexture(GL_TEXTURE0 + 4);
		glBindTexture(GL_TEXTURE_2D, blackRook_white);
		glActiveTexture(GL_TEXTURE0 + 5);
		glBindTexture(GL_TEXTURE_2D, blackRook_black);
		glActiveTexture(GL_TEXTURE0 + 6);
		glBindTexture(GL_TEXTURE_2D, whiteRook_white);
		glActiveTexture(GL_TEXTURE0 + 7);
		glBindTexture(GL_TEXTURE_2D, whiteRook_black);

		glActiveTexture(GL_TEXTURE0 + 8);
		glBindTexture(GL_TEXTURE_2D, blackKnight_white);
		glActiveTexture(GL_TEXTURE0 + 9);
		glBindTexture(GL_TEXTURE_2D, blackKnight_black);
		glActiveTexture(GL_TEXTURE0 + 10);
		glBindTexture(GL_TEXTURE_2D, whiteKnight_white);
		glActiveTexture(GL_TEXTURE0 + 11);
		glBindTexture(GL_TEXTURE_2D, whiteKnight_black);

		glActiveTexture(GL_TEXTURE0 + 12);
		glBindTexture(GL_TEXTURE_2D, blackBishop_white);
		glActiveTexture(GL_TEXTURE0 + 13);
		glBindTexture(GL_TEXTURE_2D, blackBishop_black);
		glActiveTexture(GL_TEXTURE0 + 14);
		glBindTexture(GL_TEXTURE_2D, whiteBishop_white);
		glActiveTexture(GL_TEXTURE0 + 15);
		glBindTexture(GL_TEXTURE_2D, whiteBishop_black);

		glActiveTexture(GL_TEXTURE0 + 16);
		glBindTexture(GL_TEXTURE_2D, blackQueen_white);
		glActiveTexture(GL_TEXTURE0 + 17);
		glBindTexture(GL_TEXTURE_2D, blackQueen_black);
		glActiveTexture(GL_TEXTURE0 + 18);
		glBindTexture(GL_TEXTURE_2D, whiteQueen_white);
		glActiveTexture(GL_TEXTURE0 + 19);
		glBindTexture(GL_TEXTURE_2D, whiteQueen_black);

		glActiveTexture(GL_TEXTURE0 + 20);
		glBindTexture(GL_TEXTURE_2D, blackKing_white);
		glActiveTexture(GL_TEXTURE0 + 21);
		glBindTexture(GL_TEXTURE_2D, blackKing_black);
		glActiveTexture(GL_TEXTURE0 + 22);
		glBindTexture(GL_TEXTURE_2D, whiteKing_white);
		glActiveTexture(GL_TEXTURE0 + 23);
		glBindTexture(GL_TEXTURE_2D, whiteKing_black);

		glActiveTexture(GL_TEXTURE0 + 24);
		glBindTexture(GL_TEXTURE_2D, blackPawn_selected);
		glActiveTexture(GL_TEXTURE0 + 25);
		glBindTexture(GL_TEXTURE_2D, whitePawn_selected);
		glActiveTexture(GL_TEXTURE0 + 26);
		glBindTexture(GL_TEXTURE_2D, blackRook_selected);
		glActiveTexture(GL_TEXTURE0 + 27);
		glBindTexture(GL_TEXTURE_2D, whiteRook_selected);
		glActiveTexture(GL_TEXTURE0 + 28);
		glBindTexture(GL_TEXTURE_2D, blackKnight_selected);
		glActiveTexture(GL_TEXTURE0 + 29);
		glBindTexture(GL_TEXTURE_2D, whiteKnight_selected);
		glActiveTexture(GL_TEXTURE0 + 30);
		glBindTexture(GL_TEXTURE_2D, blackBishop_selected);
		glActiveTexture(GL_TEXTURE0 + 31);
		glBindTexture(GL_TEXTURE_2D, whiteBishop_selected);
		glActiveTexture(GL_TEXTURE0 + 32);
		glBindTexture(GL_TEXTURE_2D, blackQueen_selected);
		glActiveTexture(GL_TEXTURE0 + 33);
		glBindTexture(GL_TEXTURE_2D, whiteQueen_selected);
		glActiveTexture(GL_TEXTURE0 + 34);
		glBindTexture(GL_TEXTURE_2D, blackKing_selected);
		glActiveTexture(GL_TEXTURE0 + 35);
		glBindTexture(GL_TEXTURE_2D, whiteKing_selected);

		glActiveTexture(GL_TEXTURE0 + 36);
		glBindTexture(GL_TEXTURE_2D, blackPawn_potential);
		glActiveTexture(GL_TEXTURE0 + 37);
		glBindTexture(GL_TEXTURE_2D, whitePawn_potential);
		glActiveTexture(GL_TEXTURE0 + 38);
		glBindTexture(GL_TEXTURE_2D, blackRook_potential);
		glActiveTexture(GL_TEXTURE0 + 39);
		glBindTexture(GL_TEXTURE_2D, whiteRook_potential);
		glActiveTexture(GL_TEXTURE0 + 40);
		glBindTexture(GL_TEXTURE_2D, blackKnight_potential);
		glActiveTexture(GL_TEXTURE0 + 41);
		glBindTexture(GL_TEXTURE_2D, whiteKnight_potential);
		glActiveTexture(GL_TEXTURE0 + 42);
		glBindTexture(GL_TEXTURE_2D, blackBishop_potential);
		glActiveTexture(GL_TEXTURE0 + 43);
		glBindTexture(GL_TEXTURE_2D, whiteBishop_potential);
		glActiveTexture(GL_TEXTURE0 + 44);
		glBindTexture(GL_TEXTURE_2D, blackQueen_potential);
		glActiveTexture(GL_TEXTURE0 + 45);
		glBindTexture(GL_TEXTURE_2D, whiteQueen_potential);
		glActiveTexture(GL_TEXTURE0 + 46);
		glBindTexture(GL_TEXTURE_2D, blackKing_potential);
		glActiveTexture(GL_TEXTURE0 + 47);
		glBindTexture(GL_TEXTURE_2D, whiteKing_potential);

		glActiveTexture(GL_TEXTURE0 + 48);
		glBindTexture(GL_TEXTURE_2D, blackSquare_potential);
		glActiveTexture(GL_TEXTURE0 + 49);
		glBindTexture(GL_TEXTURE_2D, whiteSquare_potential);

		glActiveTexture(GL_TEXTURE0 + 50);
		glBindTexture(GL_TEXTURE_2D, blackKing_win);
		glActiveTexture(GL_TEXTURE0 + 51);
		glBindTexture(GL_TEXTURE_2D, whiteKing_win);
		glActiveTexture(GL_TEXTURE0 + 52);
		glBindTexture(GL_TEXTURE_2D, blackKing_lose);
		glActiveTexture(GL_TEXTURE0 + 53);
		glBindTexture(GL_TEXTURE_2D, whiteKing_lose);

		GLuint clickX = glGetUniformLocation(programID, "clickX");
		glUniform1i(clickX, clicked[0]);
		GLuint clickY = glGetUniformLocation(programID, "clickY");
		glUniform1i(clickY, clicked[1]);

		glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);

		glEnableVertexAttribArray(0);
		glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
		glVertexAttribPointer(
			0,
			3,
			GL_FLOAT,
			GL_FALSE,
			0,
			(void*)0
		);

		glEnableVertexAttribArray(1);
		glBindBuffer(GL_ARRAY_BUFFER, colorbuffer);
		glVertexAttribPointer(
			1,
			3,
			GL_FLOAT,
			GL_FALSE,
			0,
			(void*)0
		);

		glEnableVertexAttribArray(2);
		glBindBuffer(GL_ARRAY_BUFFER, databuffer);
		glVertexAttribPointer(
			2,
			3,
			GL_FLOAT,
			GL_FALSE,
			0,
			(void*)0
		);

		glDrawArrays(GL_TRIANGLES, 0, 64 * 6);

		glDisableVertexAttribArray(0);
		glDisableVertexAttribArray(1);

		// Swap buffers
		glfwSwapBuffers(window);
		glfwPollEvents();

	} // Check if the ESC key was pressed or the window was closed
	while( glfwGetKey(window, GLFW_KEY_ESCAPE ) != GLFW_PRESS &&
		   glfwWindowShouldClose(window) == 0 );

	// Cleanup VBO and shader
	glDeleteBuffers(1, &vertexbuffer);
	glDeleteBuffers(1, &colorbuffer);
	glDeleteProgram(programID);
	glDeleteVertexArrays(1, &VertexArrayID);

	// Close OpenGL window and terminate GLFW
	glfwTerminate();

	return 0;
}

